{"version":3,"file":"background.js","mappingssources":["webpack://reactjs-chrome/./src/background/background.ts","webpack://reactjs-chrome/webpack/before-startup","webpack://reactjs-chrome/webpack/startup","webpack://reactjs-chrome/webpack/after-startup"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nlet smartlead;\nlet workspace;\nlet href;\nlet userId;\nlet storage;\nconst path = \"http://localhost:3000/\";\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n    let allCookies;\n    if (message.action === \"getCookies\") {\n        const { url } = message;\n        chrome.cookies.getAll({ url }, (cookies) => {\n            sendResponse(cookies);\n        });\n    }\n    if (message.action === \"openPopup\") {\n        chrome.tabs.create({\n            url: \"select.html\",\n        });\n    }\n    if (message.action === \"navigate\") {\n        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n            return __awaiter(this, void 0, void 0, function* () {\n                var tab = tabs[0];\n                var url = tab.url;\n                if (url === \"https://app.smartlead.ai/app/email-accounts\") {\n                    yield chrome.cookies.getAll({ url }, function (cookies) {\n                        const parseCookie = JSON.stringify(cookies.map(cookie => ({\n                            domain: cookie.name,\n                            value: cookie.value\n                        })));\n                        chrome.cookies.remove({\n                            url: path,\n                            name: \"link_account_cookie\"\n                        }, function (details) {\n                            console.log('Cookie removed: ', details);\n                        });\n                        chrome.cookies.remove({\n                            url: path,\n                            name: \"instantly\"\n                        }, function (details) {\n                            console.log('Cookie removed: ', details);\n                        });\n                        chrome.cookies.remove({\n                            url: path,\n                            name: \"userId\"\n                        }, function (details) {\n                            console.log('Cookie removed: ', details);\n                        });\n                        chrome.cookies.set({\n                            url: path,\n                            name: \"smartlead\",\n                            // @ts-ignore\n                            value: smartlead.cookie,\n                        });\n                        chrome.cookies.set({\n                            url: path,\n                            name: \"userId\",\n                            // @ts-ignore\n                            value: smartlead.userId,\n                        });\n                        chrome.cookies.set({\n                            url: path,\n                            name: \"link_account_cookie\",\n                            value: parseCookie,\n                        });\n                        sendResponse('smartlead');\n                    });\n                }\n                else {\n                    yield chrome.cookies.getAll({ url }, function (cookies) {\n                        const filterCookies = cookies.find(cookie => cookie.name === '__session');\n                        const parseCookie = JSON.stringify(cookies.map(cookie => ({\n                            domain: cookie.name,\n                            value: cookie.value\n                        })));\n                        chrome.cookies.remove({\n                            url: path,\n                            name: \"link_account_cookie\"\n                        }, function (details) {\n                            console.log('Cookie removed: ', details);\n                        });\n                        chrome.cookies.remove({\n                            url: path,\n                            name: \"smartlead\"\n                        }, function (details) {\n                            console.log('Cookie removed: ', details);\n                        });\n                        chrome.cookies.remove({\n                            url: path,\n                            name: \"link_account_cookie\"\n                        }, function (details) {\n                            console.log('Cookie removed: ', details);\n                        });\n                        chrome.cookies.remove({\n                            url: path,\n                            name: \"userId\"\n                        }, function (details) {\n                            console.log('Cookie removed: ', details);\n                        });\n                        chrome.cookies.set({\n                            url: path,\n                            name: \"instantly\",\n                            value: filterCookies.value,\n                        });\n                        chrome.cookies.set({\n                            url: path,\n                            name: \"link_account_cookie\",\n                            value: parseCookie,\n                        });\n                        sendResponse(allCookies);\n                    });\n                }\n            });\n        });\n    }\n    if (message.action === \"platform\") {\n        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n            return __awaiter(this, void 0, void 0, function* () {\n                var tab = tabs[0];\n                var url = tab.url;\n                sendResponse(url);\n            });\n        });\n    }\n    if (message.action === \"sendLocalStorage\") {\n        const { localStorage } = message;\n        smartlead = localStorage;\n    }\n    if (message.action === \"fromPopup\") {\n        const { platform } = message;\n        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {\n            return __awaiter(this, void 0, void 0, function* () {\n                var tab = tabs[0];\n                var url = tab.url;\n                chrome.cookies.remove({\n                    url: path,\n                    name: \"link_account_cookie\"\n                }, function (details) {\n                    console.log('Cookie removed: ', details);\n                });\n                if (platform === \"sm\") {\n                    yield chrome.cookies.getAll({ url }, function (cookies) {\n                        const parseCookie = JSON.stringify(cookies.map(cookie => ({\n                            domain: cookie.name,\n                            value: cookie.value\n                        })));\n                        chrome.cookies.remove({\n                            url: path,\n                            name: \"instantly\"\n                        }, function (details) {\n                            console.log('Cookie removed: ', details);\n                        });\n                        chrome.cookies.remove({\n                            url: path,\n                            name: \"userId\"\n                        }, function (details) {\n                            console.log('Cookie removed: ', details);\n                        });\n                        chrome.cookies.set({\n                            url: path,\n                            name: \"smartlead\",\n                            // @ts-ignore\n                            value: smartlead.cookie,\n                        });\n                        chrome.cookies.set({\n                            url: path,\n                            name: \"userId\",\n                            // @ts-ignore\n                            value: smartlead.userId,\n                        });\n                        chrome.cookies.set({\n                            url: path,\n                            name: \"link_account_cookie\",\n                            value: parseCookie\n                        });\n                        sendResponse(smartlead);\n                    });\n                }\n                else {\n                    yield chrome.cookies.getAll({ url }, function (cookies) {\n                        const filterCookies = cookies.find(cookie => cookie.name === '__session');\n                        const parseCookie = JSON.stringify(cookies.map(cookie => ({\n                            domain: cookie.name,\n                            value: cookie.value\n                        })));\n                        chrome.cookies.remove({\n                            url: path,\n                            name: \"smartlead\"\n                        }, function (details) {\n                            console.log('Cookie removed: ', details);\n                        });\n                        chrome.cookies.remove({\n                            url: path,\n                            name: \"userId\"\n                        }, function (details) {\n                            console.log('Cookie removed: ', details);\n                        });\n                        chrome.cookies.set({\n                            url: path,\n                            name: \"instantly\",\n                            value: filterCookies.value,\n                        });\n                        chrome.cookies.set({\n                            url: path,\n                            name: \"link_account_cookie\",\n                            value: parseCookie\n                        });\n                        sendResponse(allCookies);\n                    });\n                }\n            });\n        });\n    }\n    if (message.action === \"sendUser\") {\n        userId = message.data;\n    }\n    if (message.action === \"getUser\") {\n        sendResponse(userId);\n    }\n    if (message.action === \"href\") {\n        href = message.url;\n    }\n    if (message.action === \"sendHref\") {\n        sendResponse(href);\n    }\n    if (message.action === \"storage\") {\n        storage = message.data;\n    }\n    return true;\n});\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/background/background.ts\"]();\n",""],"names":[],"sourceRoot":""}